library ieee;
use ieee.std_logic_1164.all;
entity machine is
	port
	{
		clk : in std_logic;
		data_in : in std_logic;
		reset : in std_logic;
		student_id : out std_logic_vector(3 downto 0);
		current_state : out std_logic_vector(3 downto 0);
		};
end entity;
architecture fsm of machine is
	type state_type is (s0, s1, s2, s3, s4, s5, s6, s7, s8);
	signal yfsm : state_type;
begin
	process (clk, reset)
	begin
		if reset = '1' then
				yfsm <= s0;
			elsif (clk'EVENT AND clk = '1') then
				case yfsm is
					when s0 =>
						if data_in <= '0';
							yfsm <= s0;
						else data_in <= '1';
							yfsm <= s4;
					when s1 =>
						if data_in <= '0';
							yfsm <= s4;
						else data_in <= '1';
							yfsm <= s3;
					when s2 =>
						if data_in <= '0';
							yfsm <= s3;
						else data_in <= '1';
							yfsm <= s2;	
					when s3 =>
						if data_in <= '0';
							yfsm <= s2;
						else data_in <= '1';
							yfsm <= s1;
					when s4 =>
						if data_in <= '0';
							yfsm <= s1;
						else data_in <= '1';
							yfsm <= s8;	
					when s5 =>
						if data_in <= '0';
							yfsm <= s8;
						else data_in <= '1';
							yfsm <= s7;
					when s6 =>
						if data_in <= '0';
							yfsm <= s7;
						else data_in <= '1';
							yfsm <= s6;
					when s7 =>
						if data_in <= '0';
							yfsm <= s6;
						else data_in <= '1';
							yfsm <= s5;
					when s8 =>
						if data_in <= '0';
							yfsm <= s5;
						else data_in <= '1';
							yfsm <= s0;
				end case;
			end if;
		end process;
		
		process (yfsm, data_in)
		begin
			case yfsm is
					when s0 =>
					when s1 =>
					when s2 =>
					when s3 =>
					when s4 =>
					when s5 =>
					when s6 =>
					when s7 =>
					when s8 =>
				end case;
			end process;
					